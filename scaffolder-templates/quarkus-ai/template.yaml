apiVersion: scaffolder.backstage.io/v1beta3
kind: Template
metadata:
  name: opencodequest-quarkus-with-AI
  title: "OpenCodeQuest - AI-Infused application with Quarkus"
  description: "Create a quarkus intelligent application"
  tags:
    - fight-service
    - java
    - quarkus
    - opencodequest
    - ai
    - intelligent
spec:
  owner: {{ group }}
  type: service
  parameters:
  # -- update title below ---- 
    - title: Prompt me something
    # - title: Provide information about the OpenShift cluster
      required:
        - openshiftCluster
        - image_host
        - image_organization
        - image_tag
      properties:
        openshiftCluster:
          title: OpenShift Cluster
          type: string
          enum:
            - {{ cluster_subdomain }}
      dependencies:
        openshiftCluster:
          oneOf:
            - properties:
                openshiftCluster:
                  enum:
                    - {{ cluster_subdomain }}
                image_host:
                  title: Image Host
                  type: string
                  description: Host for storing image
                  enum: 
                    - {{ quay_host }}
                  default: {{ quay_host }}
                image_organization:
                  title: Organization
                  type: string
                  description: Name of the Quay Organization
                  default: quayadmin
                image_tag:
                  title: Image Tag
                  default: latest
                  type: string
                  description: Build Image tag

    - title: Provide Information for Application
      required:
        - component_id
        - java_package_name
        - api_endpoint
        - group_id
        - artifact_id
        - system
        - owner_group
      properties:
        component_id:
          title: Name
          type: string
          description: Unique name of the component ("fight" is good starting point)
          default: fight
          ui:field: EntityNamePicker
          maxLength: 23
        system:
          title: System
          type: string
          description: Select the System in which depends your service
          ui:field: EntityPicker
          ui:options:
            catalogFilter:
              kind: System
            defaultKind: System
          ui:help: 'Choose from existing systems in your organization'
        owner_group:
          title: Owner Group
          type: string
          description: Select the group that will own this service
          ui:field: EntityPicker
          ui:options:
            catalogFilter:
              kind: Group
            defaultKind: Group
          ui:help: 'Choose from existing groups in your organization'
        group_id:
          title: Group Id
          type: string
          default: com.redhat.workshop
          description: Maven Group Id
        artifact_id:
          title: Artifact Id
          type: string
          default: fight-service
          description: Maven Artifact Id
        java_package_name:
          title: Java Package Name
          type: string
          description: Name for the java package. eg (com.redhat.blah)
          default: io.quarkus.workshop.fight
        api_endpoint:
          title: API Endpoint
          default: /api/fight
          type: string
          description: Path of the first API Endpoint
        description:
          title: Description
          type: string
          description: Help others understand what this website is for.
          default: My super fight service
    - title: Application repository Information
      required:
        - repo
      properties:
        repo:
          title: Repository Location
          type: object
          properties:
            host:
              title: Repo Host
              type: string
              description: Your SCM host
              default: gitlab-gitlab
              enum:
                - gitlab-gitlab
            verify_commits:
              title: Verify Commits
              type: string
              description: Verify Git repository commits using Red Hat's Trusted Artifact Signer (TAS) service
              default: disabled
              enum:
                - enabled
                - disabled

  steps:
    - id: template
      name: Fetch Skeleton + Template
      action: fetch:template
      input:
        url: ./skeleton
        copyWithoutTemplating:
          - .github/workflows/*
        values:
          component_id: "${{ '{{' }} parameters.component_id {{ '}}' }}"
          description: "${{ '{{' }} parameters.description {{ '}}' }}"
          namespace: "${{ '{{' }} user.entity.spec.memberOf[0] {{ '}}' }}-workshop-dev"
          group_id: "${{ '{{' }} parameters.group_id {{ '}}' }}"
          artifact_id: "${{ '{{' }} parameters.artifact_id {{ '}}' }}"
          java_package_name: "${{ '{{' }} parameters.java_package_name {{ '}}' }}"
          java_package_name_dir: "${{ '{{' }} parameters.java_package_name | replace('.', '/') {{ '}}' }}"
          owner: "${{ '{{' }} user.entity.spec.memberOf[0] {{ '}}' }}"
          cluster: ".${{ '{{' }} parameters.openshiftCluster {{ '}}' }}"
          host: "${{ '{{' }} parameters.repo.host {{ '}}' }}.${{ '{{' }} parameters.openshiftCluster {{ '}}' }}"
          destination: "${{ '{{' }} user.entity.spec.memberOf[0] {{ '}}' }}/${{ '{{' }} parameters.component_id {{ '}}' }}"
          quay_destination: "${{ '{{' }} parameters.image_organization{{ '}}' }}/${{ '{{' }} user.entity.spec.memberOf[0] {{ '}}' }}-${{ '{{' }} parameters.component_id {{ '}}' }}"
          port: 8080
          verify_commits: "${{ '{{' }} parameters.repo.verify_commits {{ '}}' }}"
          api_endpoint: "${{ '{{' }} parameters.api_endpoint {{ '}}' }}"
          system: "${{ '{{' }} parameters.system {{ '}}' }}"
          user: "${{ '{{' }} parameters.owner_group | parseEntityRef | pick('name') {{ '}}' }}"

# ------ Gitlab Steps

    # - id: publish
    #   name: Publish
    #   action: publish:gitlab
    #   input:
    #     repoUrl: "${{ '{{' }} parameters.repo.host {{ '}}' }}.${{ '{{' }} parameters.openshiftCluster {{ '}}' }}?owner=${{ '{{' }} user.entity.spec.memberOf[0] {{ '}}' }}&repo=${{ '{{' }} parameters.component_id {{ '}}' }}"
    #     repoVisibility: public


 # ------ Register catalog steps Steps 

    # - id: register
    #   name: Register
    #   action: catalog:register
    #   input:
    #     repoContentsUrl: "${{ '{{' }} steps.publish.output.repoContentsUrl {{ '}}' }}"
    #     catalogInfoPath: "/catalog-info.yaml"

    - id: template-gitops-deployment
      name: Generating Deployment Resources
      action: fetch:template
      input:
        url: ./manifests
        copyWithoutTemplating: []
        values:
          component_id: "${{ '{{' }} parameters.component_id {{ '}}' }}"
          description: "${{ '{{' }} parameters.description {{ '}}' }}"
          destination: "https://${{ '{{' }} parameters.repo.host {{ '}}' }}.${{ '{{' }} parameters.openshiftCluster {{ '}}' }}/${{ '{{' }} user.entity.spec.memberOf[0] {{ '}}' }}/${{ '{{' }} parameters.component_id {{ '}}' }}-gitops.git"
          source_repository: "https://${{ '{{' }} parameters.repo.host {{ '}}' }}.${{ '{{' }} parameters.openshiftCluster {{ '}}' }}/${{ '{{' }} user.entity.spec.memberOf[0] {{ '}}' }}/${{ '{{' }} parameters.component_id {{ '}}' }}.git"
          repository_name: "${{ '{{' }} parameters.component_id {{ '}}' }}"
          git_owner: "${{ '{{' }} user.entity.spec.memberOf[0] {{ '}}' }}"
          cluster: ".${{ '{{' }} parameters.openshiftCluster {{ '}}' }}"
          namespace: "${{ '{{' }} user.entity.spec.memberOf[0] {{ '}}' }}-workshop-dev"
          image_registry: "${{ '{{' }} parameters.image_registry {{ '}}' }}"
          image_host: "${{ '{{' }} parameters.image_host {{ '}}' }}"
          image_organization: "${{ '{{' }} parameters.image_organization {{ '}}' }}"
          image_name: "${{ '{{' }} parameters.component_id {{ '}}' }}"
          image_tag: "${{ '{{' }} parameters.image_tag {{ '}}' }}"
          port: 8080
          repository_host: "${{ '{{' }} parameters.repo.host {{ '}}' }}.${{ '{{' }} parameters.openshiftCluster {{ '}}' }}"
          deployment_name: "${{ '{{' }} parameters.component_id {{ '}}' }}"
          user: "${{ '{{' }} parameters.owner_group | parseEntityRef | pick('name') {{ '}}' }}"
          verify_commits: "${{ '{{' }} parameters.repo.verify_commits {{ '}}' }}"
        targetPath: ./tenant-gitops


 # ------ publish gitops resources

    # - id: publish-gitops
    #   name: Publishing to Resource Repository
    #   action: publish:gitlab
    #   input:
    #     repoUrl: "${{ '{{' }} parameters.repo.host {{ '}}' }}.${{ '{{' }} parameters.openshiftCluster {{ '}}' }}?owner=${{ '{{' }} user.entity.spec.memberOf[0] {{ '}}' }}&repo=${{ '{{' }} parameters.component_id {{ '}}' }}-gitops"
    #     title: "gitops resources for ${{ '{{' }} parameters.component_id {{ '}}' }}"
    #     description: "gitops resources for ${{ '{{' }} parameters.component_id {{ '}}' }}"
    #     sourcePath: ./tenant-gitops
    #     repoVisibility: public
    #     branches:
    #     - name: master
    #       protected: false

 # ------ create argoCD resources

    # - id: create-argocd-resources
    #   name: Create ArgoCD Resources
    #   action: argocd:create-resources
    #   input:
    #     appName: "${{ '{{' }} user.entity.spec.memberOf[0] {{ '}}' }}-${{ '{{' }} parameters.component_id {{ '}}' }}-bootstrap"
    #     argoInstance: main
    #     namespace: rhdh-gitops
    #     repoUrl: "https://${{ '{{' }} parameters.repo.host {{ '}}' }}.${{ '{{' }} parameters.openshiftCluster {{ '}}' }}/${{ '{{' }} user.entity.spec.memberOf[0] {{ '}}' }}/${{ '{{' }} parameters.component_id {{ '}}' }}-gitops.git"
    #     path: 'argocd/'

  output:
    links:
      - title: Source Code Repository
        url: "${{ '{{' }} steps.publish.output.remoteUrl {{ '}}' }}"
      - title: Open Component in catalog
        icon: catalog
        entityRef: "${{ '{{' }} steps.register.output.entityRef {{ '}}' }}"