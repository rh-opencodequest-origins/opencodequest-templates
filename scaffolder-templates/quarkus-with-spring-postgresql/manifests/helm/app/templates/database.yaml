{{- if not (eq .Values.environment "prod") -}}
apiVersion: v1
kind: Secret
metadata:
  name: ${{values.deployment_name}}-database
type: Opaque
stringData:
  POSTGRESQL_USER: ${{values.deployment_name}}
  POSTGRESQL_PASSWORD: {{ include "quarkus-template.databasePassword" . }}
  POSTGRESQL_DATABASE: ${{values.deployment_name}}db
  username: ${{values.deployment_name}}
  password: {{ include "quarkus-template.databasePassword" . }}
  dbname: ${{values.deployment_name}}db
  jdbc-uri: jdbc:postgresql://${{values.deployment_name}}:5432/${{values.deployment_name}}?password={{ include "quarkus-template.databasePassword" . }}&user=${{values.deployment_name}}

---

apiVersion: batch/v1
kind: Job
metadata:
  name: ${{values.deployment_name}}-database-init-job
  annotations:
    argocd.argoproj.io/sync-wave: "2"
spec:
  ttlSecondsAfterFinished: 100
  template:
    spec:
      restartPolicy: OnFailure
      containers:
      - name: init-database
        image: registry.redhat.io/rhel9/postgresql-16
        command: 
        - sh 
        - -c 
        - |
            PGPASSWORD=$POSTGRESQL_PASSWORD psql -h ${{values.deployment_name}}-database -U $POSTGRESQL_USER -d $POSTGRESQL_DATABASE -f /scripts/import.sql
        envFrom:
        - secretRef:
            name: ${{values.deployment_name}}-database
        volumeMounts:
        - name: init-script
          mountPath: /scripts
      volumes:
      - name: init-script
        configMap:
          name: ${{values.deployment_name}}-importsql

---

apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: ${{values.deployment_name}}-database
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 2Gi

---

apiVersion: apps/v1
kind: Deployment
metadata:
  name: ${{values.deployment_name}}-database
  labels:
    app: ${{values.deployment_name}}-database
  annotations:
    argocd.argoproj.io/sync-wave: "0"
spec:
  replicas: 1
  selector:
    matchLabels:
      app: ${{values.deployment_name}}-database
  template:
    metadata:
      labels:
        app: ${{values.deployment_name}}-database
    spec:
      containers:
      - name: ${{values.deployment_name}}db
        image: registry.redhat.io/rhel9/postgresql-16
        ports:
        - containerPort: 5432
          name: postgres
        envFrom:
        - secretRef:
            name: ${{values.deployment_name}}-database
        volumeMounts:
        - name: postgres-storage
          mountPath: /var/lib/postgresql/data
          subPath: postgres
        resources:
          requests:
            memory: "100Mi"
            cpu: "250m"
          limits:
            memory: "128Mi"
            cpu: "400m"
        livenessProbe:
          exec:
            command:
            - pg_isready
            - -U
            - postgres
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          exec:
            command:
            - pg_isready
            - -U
            - postgres
          initialDelaySeconds: 5
          periodSeconds: 5
      volumes:
      - name: postgres-storage
        persistentVolumeClaim:
          claimName: ${{values.deployment_name}}-database

---

apiVersion: v1
kind: Service
metadata:
  name: ${{values.deployment_name}}-database
  labels:
    app: ${{values.deployment_name}}-database
  annotations:
    argocd.argoproj.io/sync-wave: "0"
spec:
  type: ClusterIP
  ports:
  - port: 5432
    targetPort: 5432
    protocol: TCP
    name: postgres
  selector:
    app: ${{values.deployment_name}}-database

---

{{- else }}
kind: Secret
apiVersion: v1
metadata:
  name: ${{values.deployment_name}}-database-app
  labels:
    {{- include "backstage.labels" . | nindent 4 }}
    {{- include "quarkus-template-database.labels" . | nindent 4 }}
stringData:
  port: '5432'
  dbname: ${{values.deployment_name}}
  username: app_user
  password: 'DevZone2024#'
  jdbc-uri: 'jdbc:postgresql://cluster-edb-prod-rw.edb-database-prod:5432/${{values.deployment_name}}?password=DevZone2024#&user=app_user'
type: kubernetes.io/basic-auth
{{- end }}